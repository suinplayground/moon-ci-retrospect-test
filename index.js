import { readFile, stat } from "node:fs/promises";
async function main() {
    const workspaceRoot = await getWorkspaceRoot();
    const ciReport = await readCiReport(workspaceRoot);
    for (const action of ciReport.actions) {
        const taskInfo = taskInfoOf(action);
        if (!taskInfo) {
            continue;
        }
        const { stdout, stderr } = await readStatus({ workspaceRoot, taskInfo });
        const { project, task, command, status } = taskInfo;
        const target = `${project}:${task}`;
        writeGroup(`${statusBadges[status]} ${bold(target)}`, ({ println }) => {
            if (command) {
                println(blue(`$ ${command}`));
            }
            const hasStdout = stdout.trim() !== "";
            const hasStderr = stderr.trim() !== "";
            if (hasStdout) {
                println(stdoutBadge);
                println(stdout);
            }
            if (hasStderr) {
                println(stderrBadge);
                println(stderr);
            }
        });
    }
}
async function getWorkspaceRoot() {
    return process.cwd();
}
async function readCiReport(workspaceRoot) {
    const ciReportPath = `${workspaceRoot}/.moon/cache/ciReport.json`;
    const ciReportFile = await readFileContent(ciReportPath);
    return JSON.parse(ciReportFile);
}
function taskInfoOf(action) {
    if (action.node.action !== "run-task") {
        return undefined;
    }
    const { project, task } = parseTarget(action.node.params.target);
    return {
        project,
        task,
        command: commandOf(action),
        status: action.status,
    };
}
function parseTarget(target) {
    const parts = target.split(":");
    const project = parts[0] ?? "unknown";
    const task = parts[1] ?? "unknown";
    return { project, task };
}
function commandOf(action) {
    for (const operation of action.operations) {
        if (operation.meta.type === "task-execution") {
            return operation.meta.command;
        }
    }
    return undefined;
}
async function readStatus({ workspaceRoot, taskInfo, }) {
    const { project, task } = taskInfo;
    const statusDir = `${workspaceRoot}/.moon/cache/states/${project}/${task}`;
    const stdoutPath = `${statusDir}/stdout.log`;
    const stderrPath = `${statusDir}/stderr.log`;
    const stdout = (await fileExists(stdoutPath)) ? await readFileContent(stdoutPath) : "";
    const stderr = (await fileExists(stderrPath)) ? await readFileContent(stderrPath) : "";
    return { stdout, stderr };
}
async function fileExists(path) {
    try {
        await stat(path);
        return true;
    }
    catch {
        return false;
    }
}
async function readFileContent(path) {
    return await readFile(path, { encoding: "utf8" });
}
function writeGroup(title, inner) {
    console.log(`::group::${title}`);
    inner({
        println(output) {
            console.log(output);
        },
    });
    console.log("::endgroup::");
}
const statusBadges = {
    passed: bgGreen(" PASS "),
    failed: bgRed(" FAIL "),
    skipped: bgBlue(" SKIP "),
};
function bgGreen(text) {
    return `\u001b[42m${text}\u001b[49m`;
}
function bgRed(text) {
    return `\u001b[41m${text}\u001b[49m`;
}
function bgBlue(text) {
    return `\u001b[44m${text}\u001b[49m`;
}
function bgDarkGray(text) {
    return `\u001b[48;5;236m${text}\u001b[49m`;
}
function bold(text) {
    return `\u001b[1m${text}\u001b[22m`;
}
function green(text) {
    return `\u001b[32m${text}\u001b[39m`;
}
function red(text) {
    return `\u001b[31m${text}\u001b[39m`;
}
function blue(text) {
    return `\u001b[34m${text}\u001b[39m`;
}
const stdoutBadge = bgDarkGray(`　${green("⏺")} STDOUT　`);
const stderrBadge = bgDarkGray(`　${red("⏺")} STDERR　`);
try {
    await main();
}
catch (error) {
    console.error(error);
    process.exit(0);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxELEtBQUssVUFBVSxJQUFJO0lBQ2xCLE1BQU0sYUFBYSxHQUFHLE1BQU0sZ0JBQWdCLEVBQUUsQ0FBQztJQUMvQyxNQUFNLFFBQVEsR0FBRyxNQUFNLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNuRCxLQUFLLE1BQU0sTUFBTSxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN2QyxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2YsU0FBUztRQUNWLENBQUM7UUFDRCxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sVUFBVSxDQUFDLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDekUsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQztRQUNwRCxNQUFNLE1BQU0sR0FBRyxHQUFHLE9BQU8sSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNwQyxVQUFVLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7WUFDckUsSUFBSSxPQUFPLEVBQUUsQ0FBQztnQkFDYixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9CLENBQUM7WUFDRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO1lBQ3ZDLE1BQU0sU0FBUyxHQUFHLE1BQU0s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